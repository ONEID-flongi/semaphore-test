- name: Send API Requests to ECS
  hosts: localhost
  vars:
    target_namespace: "{{ TARGET_NAMESPACE | lower }}"

  tasks:
    - name: Set environment variables
      set_fact:
        target_url: "{{ lookup('env', 'TARGET_URL') }}"
        auth_header: "Basic {{ lookup('env', 'API_KEY') }}"

    - name: Check if API-KEY is set
      fail:
        msg: "API-KEY environment variable is not set."
      when: auth_header == "Basic "

    - name: Disable SSL certificate validation
      set_fact:
        no_ssl_validation: |
          import ssl
          ssl._create_default_https_context = ssl._create_unverified_context

    - name: Get target auth token
      uri:
        url: "{{ target_url }}/login"
        method: GET
        headers:
          Authorization: "{{ auth_header }}"
        validate_certs: no
        timeout: 60
      register: target_response

    - name: Debug target response
      debug:
        var: target_response

    - name: Check if target auth token request was successful
      fail:
        msg: "Failed to get target auth token. Status code: {{ target_response.status }}"
      when: target_response.status != 200

    - name: Extract target auth token
      set_fact:
        target_token: "{{ target_response['x_sds_auth_token'] | default('') }}"

    - name: Check if target auth token was extracted
      fail:
        msg: "Target auth token not found in response."
      when: target_token == ''

    - name: Get buckets for namespace
      uri:
        url: "{{ target_url }}/object/bucket?namespace={{ target_namespace }}"
        method: GET
        headers:
          X-SDS-AUTH-TOKEN: "{{ target_token }}"
        validate_certs: no
        return_content: yes
      register: buckets_response

    - name: Parse buckets
      set_fact:
        buckets: "{{ buckets_response.content | from_yaml | json_query('object_buckets[*].object_bucket.name') }}"

    - name: Get quota for namespace
      uri:
        url: "{{ target_url }}/object/namespaces/namespace/{{ target_namespace }}"
        method: GET
        headers:
          X-SDS-AUTH-TOKEN: "{{ target_token }}"
        validate_certs: no
        return_content: yes
      register: quota_response

    - name: Parse quota
      set_fact:
        quota: "{{ quota_response.content | from_yaml | json_query('namespace.blocksize') | int }}"

    - name: Initialize total size
      set_fact:
        total_size: 0

    - name: Get storage info for each bucket
      loop: "{{ buckets }}"
      loop_control:
        loop_var: bucket
      uri:
        url: "{{ target_url }}/object/billing/buckets/{{ target_namespace }}/{{ bucket }}/info"
        method: GET
        headers:
          X-SDS-AUTH-TOKEN: "{{ target_token }}"
        validate_certs: no
        return_content: yes
      register: storage_response

    - name: Add bucket sizes to total
      set_fact:
        total_size: "{{ total_size + (item.content | from_yaml | json_query('bucket_billing_info.total_size') | int) }}"
      loop: "{{ storage_response.results }}"
      loop_control:
        loop_var: item

    - name: Calculate usage percentage
      set_fact:
        usage_percentage: "{{ (total_size / quota * 100) | round(0) if quota > 0 else 0 }}"

    - name: Output results
      debug:
        msg: |
          Namespace: {{ target_namespace }}
          Total Size: {{ total_size }} GO
          Quota: {{ quota }} GO
          Usage Percentage: {{ usage_percentage }}%

    - name: Logout ECS API token
      uri:
        validate_certs: no
        url: "{{ target_url }}/logout"
        method: GET
        headers:
          Content-Type: application/json
          Accept: application/json
          X-SDS-AUTH-TOKEN: "{{ target_token }}"
        return_content: yes
      when: target_token is defined