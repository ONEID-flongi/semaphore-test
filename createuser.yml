- name: Send API Requests to ECS
  hosts: localhost
  vars:
    user_name: "{{ USER_NAME | lower }}"
    target_namespace: "{{ TARGET_NAMESPACE | lower }}"
    action: "{{ ACTION | lower }}"  # "create","delete","modify"

  tasks:
    - name: Set environment variables
      set_fact:
        target_url: "{{ lookup('env', 'TARGET_URL') }}"
        auth_header: "Basic {{ lookup('env', 'API_KEY') }}"

    - name: Debug environment variables
      debug:
        msg:
#          - "Target URL: {{ target_url }}"
#          - "Target Namespace: {{ target_namespace }}"
#          - "user_name Name: {{ user_name }}"
#          - "Auth Header: {{ auth_header }}"
          - "Action: {{ action }}"

    - name: Check if API-KEY is set
      fail:
        msg: "API-KEY environment variable is not set."
      when: auth_header == "Basic "

    - name: Disable SSL certificate validation
      set_fact:
        no_ssl_validation: |
          import ssl
          ssl._create_default_https_context = ssl._create_unverified_context

    - name: Get target auth token
      uri:
        url: "{{ target_url }}/login"
        method: GET
        headers:
          Authorization: "{{ auth_header }}"
        validate_certs: no
        timeout: 60
      register: target_response

#    - name: Debug target response
#      debug:
#        var: target_response

    - name: Check if target auth token request was successful
      fail:
        msg: "Failed to get target auth token. Status code: {{ target_response.status }}"
      when: target_response.status != 200

    - name: Extract target auth token
      set_fact:
        target_token: "{{ target_response['x_sds_auth_token'] | default('') }}"

    - name: Check if target auth token was extracted
      fail:
        msg: "Target auth token not found in response."
      when: target_token == ''

    - name: Create IAM user
      uri:
        url: "{{ target_url }}/iam?Action=CreateUser&UserName={{ user_name | urlencode }}&Path=/"
        method: POST
        headers:
          Content-Type: "application/xml"
          X-SDS-AUTH-TOKEN: "{{ target_token }}"
          x-emc-namespace: "{{ target_namespace }}"
        validate_certs: no
        return_content: yes
      register: user_response
      when: action == "create"

    - name: Debug user creation response
      debug:
        var: user_response

    - name: Check if user creation was successful
      fail:
        msg: "Failed to create IAM user. Status code: {{ user_response.status }}"
      when: user_response.status != 200 and action == "create"

    - name: Create IAM access key
      uri:
        url: "{{ target_url }}/iam?Action=CreateAccessKey&UserName={{ user_name | urlencode }}"
        method: POST
        headers:
          Content-Type: "application/xml"
          X-SDS-AUTH-TOKEN: "{{ target_token }}"
          x-emc-namespace: "{{ target_namespace }}"
        validate_certs: no
        return_content: yes
      register: access_key_response
      when: action == "create"

    - name: Check if accesskey creation was successful
      fail:
        msg: "Failed to create IAM user accesskey. Status code: {{ access_key_response.status }}"
      when: access_key_response.status != 200 and action == "create"

    - name: Set Acceykey fact
      set_fact:
        AccessKeyId: "{{ access_key_response.content | regex_findall('AccessKeyId>(.*?)<') | select('match', '^[^\\s]+$') }}"
        AccessKeySelector: "{{ access_key_response.content | regex_findall('AccessKeySelector	>(.*?)<') | select('match', '^[^\\s]+$') }}"
      when: access_key_response.status = 200 and action == "create"

    - name: Print AccessKey and SecretKey
      debug: 
          var: AccessKeyId
          var: AccessKeySelector
      when: access_key_response.status = 200 and action == "create"

 #   - name: Debug access key creation response
 #     debug:
 #       var: access_key_response


    - name: List IAM user policies
      uri:
        url: "{{ target_url }}/iam?Action=ListAttachedUserPolicies&UserName={{ user_name | urlencode }}"
        method: POST
        headers:
          Content-Type: "application/xml"
          X-SDS-AUTH-TOKEN: "{{ target_token }}"
          x-emc-namespace: "{{ target_namespace }}"
        validate_certs: no
        return_content: yes
      register: user_policy_response
      when: action == "delete"

#    - name: Debug IAM policy
#      debug:
#        var: user_policy_response.content
#      when: action == "delete"

    - name: Set policy ARNs fact
      set_fact:
        policy_arns: "{{ user_policy_response.content | regex_findall('PolicyArn>(.*?)<') | select('match', '^[^\\s]+$') }}"
      when: action == "delete"

#    - name: Debug policy ARNs
#      debug:
#        var: policy_arns
#      when: action == "delete"

    - name: Detach IAM user policies
      uri:
        url: "{{ target_url }}/iam?Action=DetachUserPolicy&UserName={{ user_name | urlencode }}&PolicyArn={{ item | urlencode }}"
        method: POST
        headers:
          Content-Type: "application/xml"
          X-SDS-AUTH-TOKEN: "{{ target_token }}"
          x-emc-namespace: "{{ target_namespace }}"
        validate_certs: no
        return_content: yes
      register: detach_policy_response
      loop: "{{ policy_arns }}"
      when: action == "delete"

#    - name: Debug detach policy response
#      debug:
#        var: detach_policy_response
#      when: action == "delete"

    - name: List IAM user access keys
      uri:
        url: "{{ target_url }}/iam?Action=ListAccessKeys&UserName={{ user_name | urlencode }}"
        method: POST
        headers:
          Content-Type: "application/xml"
          X-SDS-AUTH-TOKEN: "{{ target_token }}"
          x-emc-namespace: "{{ target_namespace }}"
        validate_certs: no
        return_content: yes
      register: access_keys_response
      when: action == "delete"

#    - name: Debug IAM access keys
#      debug:
#        var: access_keys_response.content
#      when: action == "delete"

    - name: Set access key IDs fact
      set_fact:
        access_key_ids: "{{ access_keys_response.content | regex_findall('AccessKeyId>(.*?)<') | select('match', '^[A-Z0-9]+$') }}"
      when: action == "delete"

#    - name: Debug access key IDs
#      debug:
#        var: access_key_ids
#      when: action == "delete"

    - name: Delete IAM user access keys
      uri:
        url: "{{ target_url }}/iam?Action=DeleteAccessKey&UserName={{ user_name | urlencode }}&AccessKeyId={{ item | urlencode }}"
        method: POST
        headers:
          Content-Type: "application/xml"
          X-SDS-AUTH-TOKEN: "{{ target_token }}"
          x-emc-namespace: "{{ target_namespace }}"
        validate_certs: no
        return_content: yes
      register: delete_access_key_response
      loop: "{{ access_key_ids }}"
      when: action == "delete"

#    - name: Debug delete access key response
#      debug:
#        var: delete_access_key_response
#      when: action == "delete"

    - name: Delete IAM user
      uri:
        url: "{{ target_url }}/iam?Action=DeleteUser&UserName={{ user_name | urlencode }}&Path=/"
        method: POST
        headers:
          Content-Type: "application/xml"
          X-SDS-AUTH-TOKEN: "{{ target_token }}"
          x-emc-namespace: "{{ target_namespace }}"
        validate_certs: no
        return_content: yes
      register: delete_user_response
      when: action == "delete"

   # - name: Debug delete user response
   #   debug:
   #     var: delete_user_response
   #   when: action == "delete"
      
