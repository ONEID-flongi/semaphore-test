- name: Send API Requests to ECS
  hosts: localhost
  vars:
    user_name: "{{ USER_NAME | lower }}"
    target_namespace: "{{ TARGET_NAMESPACE | lower }}"
    action: "{{ ACTION | lower }}"  # "create","delete","modify"

  tasks:
    - name: Set environment variables
      set_fact:
        target_url: "{{ lookup('env', 'TARGET_URL') }}"
        auth_header: "Basic {{ lookup('env', 'API_KEY') }}"

    - name: Debug environment variables
      debug:
        msg:
#          - "Target URL: {{ target_url }}"
#          - "Target Namespace: {{ target_namespace }}"
#          - "user_name Name: {{ user_name }}"
#          - "Auth Header: {{ auth_header }}"
          - "Action: {{ action }}"

    - name: Check if API-KEY is set
      fail:
        msg: "API-KEY environment variable is not set."
      when: auth_header == "Basic "

    - name: Disable SSL certificate validation
      set_fact:
        no_ssl_validation: |
          import ssl
          ssl._create_default_https_context = ssl._create_unverified_context

    - name: Get target auth token
      uri:
        url: "{{ target_url }}/login"
        method: GET
        headers:
          Authorization: "{{ auth_header }}"
        validate_certs: no
        timeout: 60
      register: target_response

#    - name: Debug target response
#      debug:
#        var: target_response

    - name: Check if target auth token request was successful
      fail:
        msg: "Failed to get target auth token. Status code: {{ target_response.status }}"
      when: target_response.status != 200

    - name: Extract target auth token
      set_fact:
        target_token: "{{ target_response['x_sds_auth_token'] | default('') }}"

    - name: Check if target auth token was extracted
      fail:
        msg: "Target auth token not found in response."
      when: target_token == ''

    - name: Create IAM user
      uri:
        url: "{{ target_url }}/iam?Action=CreateUser&UserName={{ user_name | urlencode }}&Path=/"
        method: POST
        headers:
          Content-Type: "application/xml"
          X-SDS-AUTH-TOKEN: "{{ target_token }}"
          x-emc-namespace: "{{ target_namespace }}"
        validate_certs: no
        return_content: yes
      register: user_response
      when: action == "create"

#    - name: Debug user creation response
#      debug:
#        var: user_response

    - name: Check if user creation was successful
      fail:
        msg: "Failed to create IAM user. Status code: {{ user_response.status }}"
      when: user_response.status != 200
      when: action == "create"

    - name: Create IAM access key
      uri:
        url: "{{ target_url }}/iam?Action=CreateAccessKey&UserName={{ user_name | urlencode }}"
        method: POST
        headers:
          Content-Type: "application/xml"
          X-SDS-AUTH-TOKEN: "{{ target_token }}"
          x-emc-namespace: "{{ target_namespace }}"
        validate_certs: no
        return_content: yes
      register: access_key_response
      when: action == "create"

 #   - name: Debug access key creation response
 #     debug:
 #       var: access_key_response


    - name: list IAM user policy
      uri:
        url: "{{ target_url }}/iam?Action=ListAttachedUserPolicies&UserName={{ user_name | urlencode }}"
        method: POST
        headers:
          Content-Type: "application/xml"
          X-SDS-AUTH-TOKEN: "{{ target_token }}"
          x-emc-namespace: "{{ target_namespace }}"
        validate_certs: no
        return_content: yes
      register: user_policy_response
      when: action == "delete"

    - name: debug iam policy
      debug:
        var: user_policy_response.content

    - name: Set policy ARN fact
      set_fact:
        policy_arn: "{{ user_policy_response.content | regex_findall('PolicyArn>(.*?)<') | first }}"
      when: action == "delete"

    - name: Debug policy ARN
      debug:
        var: policy_arn
      when: action == "delete"


    - name: Delete IAM user policy
      uri:
        url: "{{ target_url }}/iam?Action=DetachUserPolicy&UserName={{ user_name | urlencode }}&PolicyArn={{ policy_arn | urlencode }}"
        method: POST
        headers:
          Content-Type: "application/xml"
          X-SDS-AUTH-TOKEN: "{{ target_token }}"
          x-emc-namespace: "{{ target_namespace }}"
        validate_certs: no
        return_content: yes
      register: user_response
      when: action == "delete"

      
    - name: Delete IAM user
      uri:
        url: "{{ target_url }}/iam?Action=DeleteUser&UserName={{ user_name | urlencode }}&Path=/"
        method: POST
        headers:
          Content-Type: "application/xml"
          X-SDS-AUTH-TOKEN: "{{ target_token }}"
          x-emc-namespace: "{{ target_namespace }}"
        validate_certs: no
        return_content: yes
      register: user_response
      when: action == "delete"
     
   #- name: Check if user deletion was successful
   #   fail:
   #     msg: "Failed to delete IAM user. Status code: {{ user_response.status }}"
   #   when: user_response.status != 200
   #   when: action == "delete"


    - name: Logout ECS API token
      uri:
        validate_certs: no
        url: "{{ target_url }}/logout"
        method: GET
        headers:
          Content-Type: application/json
          Accept: application/json
          X-SDS-AUTH-TOKEN: "{{ target_token }}"
        return_content: yes
      register: results_logout
      
