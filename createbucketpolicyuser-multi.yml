- name: Send API Requests to ECS
  hosts: localhost
  vars:
    bucket_names: "{{ BUCKET_NAME.split(',') | lower }}"
    target_namespace: "{{ TARGET_NAMESPACE | lower }}"
    user_names: "{{ USER_NAME.split(',') | lower }}"
    policy_names: "{{ POLICY_NAME.split(',') | lower }}"
    policy_description: "Policy for managing access on {{ item.0 }}"
    policy_json_template: |
      {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "s3:GetObject",
              "s3:GetObjectAcl",
              "s3:GetObjectLegalHold",
              "s3:GetObjectRetention",
              "s3:GetObjectTagging",
              "s3:GetObjectVersion",
              "s3:GetObjectVersionAcl",
              "s3:GetObjectVersionTagging",
              "s3:GetObjectVersionForReplication",
              "s3:GetDetailedReplicationStatus",
              "s3:ListMultipartUploadParts",
              "s3:ListBucketVersions",
              "s3:GetBucketVersioning",
              "s3:GetBucketObjectLockConfiguration",
              "s3:GetBucketAcl",
              "s3:GetBucketCORS",
              "s3:GetLifecycleConfiguration",
              "s3:ListBucketMultipartUploads",
              "s3:GetBucketPolicy",
              "s3:GetReplicationConfiguration",
              "s3:GetBucketNotification",
              "s3:GetBucketMetaDataSearchKey",
              "s3:GetBucketLocation",
              "s3:GetBucketLogging",
              "s3:CreateBucket",
              "s3:DeleteBucket",
              "s3:PutBucketCORS",
              "s3:PutBucketVersioning",
              "s3:PutBucketObjectLockConfiguration",
              "s3:EnableObjectLock",
              "s3:PutLifecycleConfiguration",
              "s3:PutObject",
              "s3:DeleteObject",
              "s3:DeleteObjectVersion",
              "s3:AbortMultipartUpload",
              "s3:PutObjectLegalHold",
              "s3:PutObjectRetention",
              "s3:BypassGovernanceRetention",
              "s3:PutBucketLogging",
              "s3:PutObjectTagging",
              "s3:PutObjectVersionTagging",
              "s3:DeleteObjectTagging",
              "s3:DeleteObjectVersionTagging",
              "s3:PutBucketAcl",
              "s3:PutBucketPolicy",
              "s3:DeleteBucketPolicy",
              "s3:PutObjectAcl",
              "s3:PutObjectVersionAcl",
              "s3:PutReplicationConfiguration",
              "s3:DeleteReplicationConfiguration",
              "s3:ReplicateObject",
              "s3:ReplicateTags",
              "s3:ReplicateDelete",
              "s3:ObjectOwnerOverrideToBucketOwner",
              "s3:PutBucketNotification",
              "s3:ListBucket",
              "s3:ListAllMyBuckets"
            ],
            "Resource": [
              "arn:aws:s3:::{{ item.0 }}/*",
              "arn:aws:s3:::{{ item.0 }}"
            ],
            "Effect": "Allow",
            "Sid": "VisualEditor0"
          },
          {
            "Action": [
              "s3:ListAllMyBuckets"
            ],
            "Resource": "*",
            "Effect": "Allow",
            "Sid": "VisualEditor1"
          }
        ]
      }

  tasks:
    - name: Set environment variables
      set_fact:
        target_url: "{{ lookup('env', 'TARGET_URL') }}"
        auth_header: "Basic {{ lookup('env', 'API_KEY') }}"

    - name: Debug environment variables
      debug:
        msg:
          - "Target URL: {{ target_url }}"
          - "Target Namespace: {{ target_namespace }}"
          - "Bucket Names: {{ bucket_names }}"
          - "User Names: {{ user_names }}"
          - "Policy Names: {{ policy_names }}"
          - "Auth Header: {{ auth_header }}"

    - name: Check if API-KEY is set
      fail:
        msg: "API-KEY environment variable is not set."
      when: auth_header == "Basic "

    - name: Disable SSL certificate validation
      set_fact:
        no_ssl_validation: |
          import ssl
          ssl._create_default_https_context = ssl._create_unverified_context

    - name: Get target auth token
      uri:
        url: "{{ target_url }}/login"
        method: GET
        headers:
          Authorization: "{{ auth_header }}"
        validate_certs: no
        timeout: 60
      register: target_response

    - name: Check if target auth token request was successful
      fail:
        msg: "Failed to get target auth token. Status code: {{ target_response.status }}"
      when: target_response.status != 200

    - name: Extract target auth token
      set_fact:
        target_token: "{{ target_response['x_sds_auth_token'] | default('') }}"

    - name: Check if target auth token was extracted
      fail:
        msg: "Target auth token not found in response."
      when: target_token == ''

    - name: Create bucket
      uri:
        url: "{{ target_url }}/object/bucket"
        method: POST
        headers:
          X-SDS-AUTH-TOKEN: "{{ target_token }}"
          Content-Type: "application/xml"
        return_content: yes
        body: |
          <object_bucket_create>
            <name>{{ item }}</name>
            <vpool></vpool>
            <filesystem_enabled>false</filesystem_enabled>
            <head_type>s3</head_type>
            <namespace>{{ target_namespace }}</namespace>
            <is_stale_allowed>true</is_stale_allowed>
            <is_tso_read_only>true</is_tso_read_only>
            <retention>0</retention>
            <compliance_enabled>false</compliance_enabled>
            <search_metadata>
              <isEnabled>true</isEnabled>
              <maxKeys>0</maxKeys>
              <metadata_tokens>false</metadata_tokens>
              <metadata>
                <datatype>datetime</datatype>
                <name>LastModified</name>
                <type>System</type>
              </metadata>
            </search_metadata>
            <owner>urn:ecs:iam::{{ target_namespace }}:root</owner>
            <softquota>-1</softquota>
          </object_bucket_create>
        validate_certs: no
      register: create_bucket_response
      ignore_errors: yes
      loop: "{{ bucket_names }}"
      loop_control:
        label: "{{ item }}"

    - name: Check if bucket creation was successful
      fail:
        msg: "Failed to create Bucket: {{ item }}. Response: {{ create_bucket_response.results[item_index].content }}"
      when: 
        - create_bucket_response.results[item_index].status != 200
      loop: "{{ bucket_names }}"
      loop_control:
        index_var: item_index
        label: "{{ item }}"
        
    - name: Create IAM policy
      uri:
        url: "{{ target_url }}/iam?Action=CreatePolicy&PolicyName={{ item.1 | urlencode }}&Description={{ policy_description | urlencode }}&PolicyDocument={{ policy_json_template| to_json | urlencode }}"
        method: POST
        headers:
          Content-Type: "application/xml"
          X-SDS-AUTH-TOKEN: "{{ target_token }}"
          x-emc-namespace: "{{ target_namespace }}"
        validate_certs: no
        return_content: yes
      register: policy_response
      loop: "{{ bucket_names | zip(policy_names) }}"
      loop_control:
        label: "{{ item.1 }}"
      ignore_errors: yes

    - name: Check if policy creation was successful
      fail:
        msg: "Failed to create Policy: {{ item.1 }}. Response: {{ policy_response.results[item_index].content }}"
      when: 
        - policy_response.results[item_index].status != 200
      loop: "{{ bucket_names | zip(policy_names) }}"
      loop_control:
        index_var: item_index
        label: "{{ item.1 }}"

    - name: POLICY XML
      debug:
       msg: "{{ policy_response.results[item_index].content }}"
      loop: "{{ bucket_names | zip(policy_names) }}"
      loop_control:
        index_var: item_index
        label: "{{ item.1 }}"

    - name: Create IAM user
      uri:
        url: "{{ target_url }}/iam?Action=CreateUser&UserName={{ item | urlencode }}&Path=/"
        method: POST
        headers:
          Content-Type: "application/xml"
          X-SDS-AUTH-TOKEN: "{{ target_token }}"
          x-emc-namespace: "{{ target_namespace }}"
        validate_certs: no
        return_content: yes
      register: create_user_response
      loop: "{{ user_names }}"
      loop_control:
        label: "{{ item }}"
      ignore_errors: yes

    - name: Check if user creation was successful
      fail:
        msg: "Failed to create User: {{ item }}. Response: {{ create_user_response.results[item_index].content }}"
      when: 
        - create_user_response.results[item_index].status != 200
      loop: "{{ user_names }}"
      loop_control:
        index_var: item_index
        label: "{{ item }}"

    - name: IAM User XML
      debug:
       msg: "{{ create_user_response.results[item_index].content }}"
      loop: "{{ user_names }}"
      loop_control:
        index_var: item_index
        label: "{{ item }}"

    - name: Create IAM access key
      uri:
        url: "{{ target_url }}/iam?Action=CreateAccessKey&UserName={{ item | urlencode }}"
        method: POST
        headers:
          Content-Type: "application/xml"
          X-SDS-AUTH-TOKEN: "{{ target_token }}"
          x-emc-namespace: "{{ target_namespace }}"
        validate_certs: no
        return_content: yes
      register: access_key_response
      loop: "{{ user_names }}"
      loop_control:
        label: "{{ item }}"
      ignore_errors: yes

    - name: Check if access key creation was successful
      fail:
        msg: "Failed to create Access Key for User: {{ item }}. Response: {{ access_key_response.results[item_index].content }}"
      when: 
        - access_key_response.results[item_index].status != 200
      loop: "{{ user_names }}"
      loop_control:
        index_var: item_index
        label: "{{ item }}"

    - name: AccessKey XML
      debug:
       msg: "{{ access_key_response.results[item_index].content }}"
      loop: "{{ user_names }}"
      loop_control:
        index_var: item_index
        label: "{{ item }}"

    - name: Attach IAM user policy
      uri:
        url: "{{ target_url }}/iam?Action=AttachUserPolicy&PolicyArn=urn:ecs:iam::{{ target_namespace }}:policy/{{ item.1 | urlencode }}&UserName={{ item.0 | urlencode }}"
        method: POST
        headers:
          Content-Type: "application/xml"
          X-SDS-AUTH-TOKEN: "{{ target_token }}"
          x-emc-namespace: "{{ target_namespace }}"
        validate_certs: no
        return_content: yes        
      register: attach_policy_response
      loop: "{{ user_names | zip(policy_names) }}"
      loop_control:
        label: "{{ item.0 }}"
      ignore_errors: yes

    - name: Check if policy attachment was successful
      fail:
        msg: "Failed to attach Policy to User: {{ item.0 }}. Response: {{ attach_policy_response.results[item_index].content }}"
      when: 
        - attach_policy_response.results[item_index].status != 200
      loop: "{{ user_names | zip(policy_names) }}"
      loop_control:
        index_var: item_index
        label: "{{ item.0 }}"

    - name: ATTACH POLICY XML
      debug:
       msg: "{{ attach_policy_response.results[item_index].content }}"
      loop: "{{ user_names | zip(policy_names) }}"
      loop_control:
        index_var: item_index
        label: "{{ item.0 }}"


    - name: Logout ECS API token
      uri:
        validate_certs: no
        url: "{{ target_url }}/logout"
        method: GET
        headers:
          Content-Type: application/json
          Accept: application/json
          X-SDS-AUTH-TOKEN: "{{ target_token }}"
        return_content: yes
      register: results_logout
